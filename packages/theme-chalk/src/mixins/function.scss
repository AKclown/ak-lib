// 全局的 SCSS 自定义函数

@use "config";
@use "sass:meta";
@use "sass:string";

// 该函数将选择器转化为字符串，并截取指定位置的字符（获取父元素的class）
@function selectorToString($selector) {
  $selector: meta.inspect(
    $selector
  ); // inspect(...) 表达式中的内容如果是正常会返回对应的内容，如果发生错误则会弹出一个错误提示。
  // [start,end]都是闭区间
  $selector: string.slice($selector, 2, -2);
  // .el-icon
  @return $selector;
}
// 判断父级选择器是否包含'--'
@function containsModifier($selector) {
  $selector: selectorToString($selector);

  @if string.index($selector, config.$modifier-separator) {
    // string.index 返回字符串的第一个索引
    @return true;
  } @else {
    @return false;
  }
}

// 判断父级选择器是否包含'.is-'
@function containWhenFlag($selector) {
  $selector: selectorToString($selector);

  @if string.index($selector, "." + config.$state-prefix) {
    @return true;
  } @else {
    @return false;
  }
}
// 判断父级是否包含 ':' （用于判断伪类和伪元素）
@function containPseudoClass($selector) {
  $selector: selectorToString($selector);

  @if string.index($selector, ":") {
    @return true;
  } @else {
    @return false;
  }
}

// 判断父级选择器，是否包含`--` `.is-`  `：`这三种字符
@function hitAllSpecialNestRule($selector) {
  // 1.containsModifier 判断是否存在 --
  // 2.containWhenFlag 判断是否存在 .is-
  // 3.containPseudoClass 判断是否存在 ：

  @return containsModifier($selector) or containWhenFlag($selector) or
    containPseudoClass($selector);
}

// join var name
// joinVarName(('button', 'text-color')) => '--el-button-text-color'
@function joinVarName($list) {
  $name: "--" + config.$namespace;

  @each $item in $list {
    @if $item != "" {
      $name: $name + "-" + $item;
    }
  }

  @return $name;
}

// getCssVarName('button', 'text-color') => '--el-button-text-color'
@function getCssVarName($args...) {
  @return joinVarName($args);
}

// 获取CSS变量对应的样式值
// getCssVar('button', 'text-color') => var(--el-button-text-color)
@function getCssVar($args...) {
  @return var(#{joinVarName($args)});
}
