// 因为要实现按需导入组件，所以各个组件单独一个css文件

@use "sass:map";
@use "common/var" as *;
@use "mixins/mixins" as *;
@use "mixins/var" as *;
@use "mixins/function" as *;
@use "mixins/button" as *;

// el-button
@include b(button) {
  // $ 生成组件 CSS 变量
  // --el-button-...
  // 分组的样式 （规划: 每一个组件为一个分组） - 生成
  @include set-component-css-var("button", $button);
}

// 生成组件 CSS 变量之后，我们就可以去设置组件的样式
@include b(button) {
  display: inline-flex;
  justify-content: center;
  align-items: center;

  line-height: 1;
  height: map.get($input-height, "default");
  white-space: nowrap;
  cursor: pointer;

  // 使用button的CSS变量的样式:  --el-button-text-color: var(--el-text-color-primary); => color: #fff

  color: getCssVar("button", "text-color");
  text-align: center;
  box-sizing: border-box;
  outline: none;
  transition: 0.1s;

  font-weight: getCssVar("button", "font-weight");

  user-select: none;
  vertical-align: middle;
  -webkit-appearance: none;

  background-color: getCssVar("button", "bg-color");
  border: getCssVar("border");
  border-color: getCssVar("button", "border-color");

  // button组件和其他组件的样式有一个最大的不同就是，Button组件默认是有primary, success, warning, danger, info
  // 加上默认的主题色，一共有六种主题色，而我们上面实现的是默认的主题色，也是所有其他组件的默认实现方式

  // "多态": 根据不同的 classname 来进行实现不同的 UI 样式的 CSS 变量,
  // 对应的分别是 el-button--primary、el-button--success、el-button--warning、el-button--danger、el-button--info
  // 在BEM规范中 primary\success\warning\danger\info 是 Button 组件的不同修饰符,要生成修改器的classname则需要通过@mixin m()

  @each $type in (primary, success, warning, danger, info) {
    // el-button--primary  ...
    @include m($type) {
      // 在当前的装饰器下，设置不同的CSS变量映射，从而达到不同类型的装饰器 对应 不同的样式值

      @include button-variant($type);
    }
  }

  
}
